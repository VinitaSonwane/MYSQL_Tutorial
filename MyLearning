Enter password: **********
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 11
Server version: 8.0.28 MySQL Community Server - GPL

Copyright (c) 2000, 2022, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

*********************************************************************************************************************************************************
## Database : 1) Database is the collection of the data in a format that can be easily accessed(digital).
              2) A software application used to manage our DB is called Database Management System.


## Types of Databases : 
1) Relational Database :      Data stored in a tables 
                              eg.MYSQL , SQLServer , Oracle

2) Non-Relational Database  :    Data does not store in tables 
(NOSQL)                          eg.mongoDB


*****************************************************************************************************

# what is SQL? 
SQL is a Structure Querry Language , used to interact with relational database.
#it is used to perform CRUD operations 
1)Create
2)Read
3)Update
4)Delete

## SQL Commands 
DDL : Data Defination Language (create , alter , drop)
DML : Data Manipulation Language(insert , update , delete )
DCL : Data Control Language (Grant ,  Revoke)
TCL : Transaction Control Language (commit , rollback)
DQL : Data Querry Language ( select)

## SQL Datatypes 
CHAR , VARCHAR , BLOB , INT , TINYINT , BIGINT , BIT , FLOAT , DOUBLE , BOOLEAN , DATE , YEAR 

*******************************************************************************************************************

## Database Queries : 

1) Create our 1st database
mysql> create database Student ;
Query OK, 1 row affected (0.05 sec)

2) mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| college            |
| information_schema |
| mysql              |
| performance_schema |
| practice           |
| student            |
| xyz                |
+--------------------+
7 rows in set (0.00 sec)

mysql> use Student ;
Database changed

# Create stu table 
mysql> create table stu(id INT PRIMARY KEY , name varchar(3) , age INT NOT NULL );
Query OK, 0 rows affected (0.09 sec)

mysql> describe stu;
+-------+------------+------+-----+---------+-------+
| Field | Type       | Null | Key | Default | Extra |
+-------+------------+------+-----+---------+-------+
| id    | int        | NO   | PRI | NULL    |       |
| name  | varchar(3) | YES  |     | NULL    |       |
| age   | int        | NO   |     | NULL    |       |
+-------+------------+------+-----+---------+-------+
3 rows in set (0.01 sec)
mysql> ALTER TABLE stu MODIFY name VARCHAR(50);
Query OK, 0 rows affected (0.04 sec)

3) Insert the values in stu table 
mysql> INSERT INTO stu VALUES (2, "Diksha", 22) , (3, "Shubhra", 23), (4,"Chaitu",24),(5 , " Nachi" , 25);
Query OK, 1 row affected (0.02 sec)

mysql> select * from stu;
+----+---------+-----+
| id | name    | age |
+----+---------+-----+
|  1 | Vins    |  21 |
|  2 | Diksha  |  22 |
|  3 | Shubhra |  23 |
|  4 | Chaitu  |  24 |
|  5 |  Nachi  |  25 |
+----+---------+-----+
5 rows in set (0.01 sec)

mysql> CREATE DATABASE IF NOT EXISTS student;
Query OK, 1 row affected, 1 warning (0.01 sec)

**************************************************************************************************************************************

###  Practice question : 
Que :- create a databse for your company named XYZ
Ans :- 
mysql> show databases ;
+--------------------+
| Database           |
+--------------------+
| college            |
| information_schema |
| mysql              |
| performance_schema |
| practice           |
| student            |
| xyz                |
| xyz_company        |
+--------------------+
8 rows in set (0.00 sec)

mysql> create table employee(id INT PRIMARY KEY , name VARCHAR(100), salary INT );
Query OK, 0 rows affected (0.09 sec)

mysql> desc employee;
+--------+--------------+------+-----+---------+-------+
| Field  | Type         | Null | Key | Default | Extra |
+--------+--------------+------+-----+---------+-------+
| id     | int          | NO   | PRI | NULL    |       |
| name   | varchar(100) | YES  |     | NULL    |       |
| salary | int          | YES  |     | NULL    |       |
+--------+--------------+------+-----+---------+-------+
3 rows in set (0.01 sec)
mysql> insert into employee (id,name,salary)
    -> VALUES
    -> (1,"adam" , 25000),
    -> (2,"bob" , 30000),
    -> (3,"casey" , 40000);
Query OK, 3 rows affected (0.02 sec)
Records: 3  Duplicates: 0  Warnings: 0
mysql> select * from employee;
+----+-------+--------+
| id | name  | salary |
+----+-------+--------+
|  1 | adam  |  25000 |
|  2 | bob   |  30000 |
|  3 | casey |  40000 |
+----+-------+--------+
3 rows in set (0.00 sec)

*******************************************************************************************************************************************
## KEYS :
**Primary Key** : It is a column(or set of columns) in a table that uniquely identifies each row.(a unique id) . 
                  There is only 1 PK & it should be NOT NULL .
**Foreign Key** : A foreign key is a column(or set of columns) in a table that refers to the primary key in the table 
                  There can be multiple FKs . FKs can have duplicate & null values 
*******************************************************************************************************************************************

## Constraints :
1) NOT NULL    : colums cannot have a null value (eg.col1 int NOT NULL)
2) UNIQUE      : All values in column are different(eg.col2 int UNIQUE)
3) Primary Key : makes a column unique & not null but used only for one (eg.id int PRIMARY KEY) 
4) Foreign Key : prevent actions that would destory links between tables(eg. create table Temp(cust_id int , FOREIGN KEY(cust_id) references customer(id)
5) Default     : sets the default value of a column (eg. salary INT DEFAULT 25000)
6) Check       : it can limit the values allowed in a column(eg.create table city(id INT PRIMARY KEY , city VARCHAR(50) , age INT , CONSTRAINT age_check CHECK(age>= 18 AND city="Delhi")


##queries 
mysql> create table temp1(id INT NOT NULL ,  PRIMARY KEY(id) );
Query OK, 0 rows affected (0.08 sec)

mysql> create table emp(id INT , salary INT DEFAULT 25000);
Query OK, 0 rows affected (0.11 sec)

mysql> insert into emp(id) values(101);
Query OK, 1 row affected (0.02 sec)

mysql> select * from emp;
+------+--------+
| id   | salary |
+------+--------+
|  101 |  25000 |
+------+--------+
1 row in set (0.00 sec)

mysql> CREATE TABLE Student (
    ->     rollno INT PRIMARY KEY,
    ->     name VARCHAR(50),
    ->     marks INT NOT NULL,
    ->     grade VARCHAR(10),
    ->     city VARCHAR(20)
    -> );
Query OK, 0 rows affected (0.09 sec)

mysql> insert into Student(rollno,name,marks,grade,city)
    -> values
    -> (101,"chaitu",78,"A","Pune"),
    -> (102,"vins",79,"B","Mumbai"),
    -> (103,"nachi",85,"C","Mumbai"),
    -> (104,"tush",92,"D","Delhi"),
    -> (105,"piyu",87,"A","Delhi"),
    -> (106,"diksha",80,"B","Delhi");
Query OK, 6 rows affected (0.02 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select city from Student;
+--------+
| city   |
+--------+
| Pune   |
| Mumbai |
| Mumbai |
| Delhi  |
| Delhi  |
| Delhi  |
+--------+
6 rows in set (0.00 sec)

## DISTINCT print only the unique values(not allows the duplicates )
mysql> select DISTINCT city from Student;
+--------+
| city   |
+--------+
| Pune   |
| Mumbai |
| Delhi  |
+--------+
3 rows in set (0.01 sec)
*****************************************************************************************************************************

## WHERE clause  : To define some conditions(eg. select col1,col2 from table_name WHERE conditios;) 

mysql> select * from Student WHERE marks>80;
+--------+-------+-------+-------+--------+
| rollno | name  | marks | grade | city   |
+--------+-------+-------+-------+--------+
|    103 | nachi |    85 | C     | Mumbai |
|    104 | tush  |    92 | D     | Delhi  |
|    105 | piyu  |    87 | A     | Delhi  |
+--------+-------+-------+-------+--------+
3 rows in set (0.01 sec)

mysql> select * from Student WHERE city= "Mumbai";
+--------+-------+-------+-------+--------+
| rollno | name  | marks | grade | city   |
+--------+-------+-------+-------+--------+
|    102 | vins  |    79 | B     | Mumbai |
|    103 | nachi |    85 | C     | Mumbai |
+--------+-------+-------+-------+--------+
2 rows in set (0.01 sec)


  ** using Operators in WHERE **
   Arithmetic Operator : + ,- ,* , / , % 
   Comparison Operator : = , != , > , < , >= , <= 
   Logical Operator    : AND , OR, NOT , IN , BETWEEN , ALL , LIKE , ANY 
   Bitwise Operator    : &(Bitwise AND) , | (Bitwise OR)

*****AND Operator*****
(to check for both conditions to be true )
mysql> select * from Student WHERE marks>80 AND city="Delhi";
+--------+------+-------+-------+-------+
| rollno | name | marks | grade | city  |
+--------+------+-------+-------+-------+
|    104 | tush |    92 | D     | Delhi |
|    105 | piyu |    87 | A     | Delhi |
+--------+------+-------+-------+-------+
2 rows in set (0.00 sec)

*****OR Operator*****
(to check for one of the conditions to be true )
mysql> select * from Student WHERE marks>85 OR city="Delhi";
+--------+--------+-------+-------+-------+
| rollno | name   | marks | grade | city  |
+--------+--------+-------+-------+-------+
|    104 | tush   |    92 | D     | Delhi |
|    105 | piyu   |    87 | A     | Delhi |
|    106 | diksha |    80 | B     | Delhi |
+--------+--------+-------+-------+-------+
3 rows in set (0.00 sec)

*****BETWEEN Operator*****
(select for a given range)
mysql> select * from Student WHERE marks BETWEEN 70 AND 85;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | A     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
4 rows in set (0.00 sec)

*****IN Operator*****
(matches any value in the list)
mysql> select * from Student WHERE city IN ("Delhi","Mumbai");
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | A     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
5 rows in set (0.00 sec)

*****NOT Operator *****
(to negate the given condition)
mysql> select * from Student WHERE city NOT IN("Delhi","Mumbai");
+--------+--------+-------+-------+------+
| rollno | name   | marks | grade | city |
+--------+--------+-------+-------+------+
|    101 | chaitu |    78 | A     | Pune |
+--------+--------+-------+-------+------+
1 row in set (0.00 sec)
*******************************************************************************************************

## LIMIT clause ##
(sets an upper limit on a number of(tuples)rows to be returned
eg.
mysql> select * from Student LIMIT 3;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | A     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
+--------+--------+-------+-------+--------+
3 rows in set (0.00 sec)

 ## ORDER BY CLAUSE ## 
(To sort in ascending(ASC) or descending order(DESC)
Eg. 
mysql> select * from Student ORDER BY city ASC;;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | A     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    101 | chaitu |    78 | A     | Pune   |
+--------+--------+-------+-------+--------+
6 rows in set (0.01 sec)

mysql> select * from Student ORDER BY city DESC;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | A     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | A     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
6 rows in set (0.00 sec)

mysql> select * from Student ORDER BY marks DESC LIMIT 3;
+--------+-------+-------+-------+--------+
| rollno | name  | marks | grade | city   |
+--------+-------+-------+-------+--------+
|    104 | tush  |    92 | D     | Delhi  |
|    105 | piyu  |    87 | A     | Delhi  |
|    103 | nachi |    85 | C     | Mumbai |
+--------+-------+-------+-------+--------+
3 rows in set (0.00 sec)
*********************************************************************
## GROUP BY Clause ##
Group rows that have the same values into summary row
It collects data from multiple records and groups the result by one or more column.
Generally we use group by with the some aggregation function

eg. 
mysql> select * from Student GROUP BY marks ;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | A     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | A     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
6 rows in set (0.00 sec)

mysql> select * from Student GROUP BY city ;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | A     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
+--------+--------+-------+-------+--------+
3 rows in set (0.00 sec)

*****************************************************************************
## Having Clause
Similar to the WHERE i.e applies some condition on rows.
using when we want to apply any condition after grouping.


**General Order**
SELECT column(s)
FROM table_name
WHERE condition
GROUP BY column(s)
Having condition
ORDER BY column(s)ASC;

************************************************************************************************************************************************
## Aggregate Functions ##
Aggregate functions perform a calculation ona set of values abd return a single value .

1) COUNT()
mysql> select COUNT(marks) from Student;
+--------------+
| COUNT(marks) |
+--------------+
|            6 |
+--------------+
1 row in set (0.02 sec)

2) MAX()
mysql> select MAX(marks) from Student;
+------------+
| MAX(marks) |
+------------+
|         92 |
+------------+
1 row in set (0.02 sec)

3) MIN()
mysql> select MIN(marks) from Student;
+------------+
| MIN(marks) |
+------------+
|         78 |
+------------+
1 row in set (0.00 sec)

4) SUM()
mysql> select SUM(marks) from Student;
+------------+
| SUM(marks) |
+------------+
|        501 |
+------------+
1 row in set (0.00 sec)

5) AVG()
mysql> select AVG(marks) from Student;
+------------+
| AVG(marks) |
+------------+
|    83.5000 |
+------------+
1 row in set (0.00 sec)
***********************************************************************************
## Table Related Queries
************Update(to update existing rows)***********

update table_name 
SET col1 = val1 , col2 = val2
WHERE condition;

****EXAMPLE***
mysql> use college ;
Database changed
mysql> select * from Student ;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | A     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | A     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
6 rows in set (0.01 sec)

mysql> UPDATE Student
    -> SET grade = "O"
    -> WHERE grade = "A";
Query OK, 2 rows affected (0.03 sec)
Rows matched: 2  Changed: 2  Warnings: 0
mysql> select * from Student ;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | O     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | O     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
6 rows in set (0.00 sec)

***********Alter (to change the schema) ***************
1) **ADD Column** 
    ALTER TABLE table_name 
    ADD COLUMN column_name datatype constraint;
# EXAMPLE -:
mysql> ALTER TABLE student
    -> ADD COLUMN age INT ;
Query OK, 0 rows affected (0.10 sec)
Records: 0  Duplicates: 0  Warnings: 0
mysql> select * from student ;
+--------+--------+-------+-------+--------+------+
| rollno | name   | marks | grade | city   | age  |
+--------+--------+-------+-------+--------+------+
|    101 | chaitu |    78 | O     | Pune   | NULL |
|    102 | vins   |    79 | B     | Mumbai | NULL |
|    103 | nachi  |    85 | C     | Mumbai | NULL |
|    104 | tush   |    92 | D     | Delhi  | NULL |
|    105 | piyu   |    87 | O     | Delhi  | NULL |
|    106 | diksha |    80 | B     | Delhi  | NULL |
+--------+--------+-------+-------+--------+------+
6 rows in set (0.00 sec)

2) **DROP column** 
   ALTER TABLE table_name
   DROP COLUMN column_name;
#EXAMPLE -: 
mysql> ALTER TABLE student
    -> DROP COLUMN age ;
Query OK, 0 rows affected (0.17 sec)
Records: 0  Duplicates: 0  Warnings: 0
mysql> select * from student ;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | O     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | O     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
6 rows in set (0.00 sec)

3) **RENAME table** 
   ALTER TABLE table_name
   RENAME TO new_table_name;

#EXAMPLE -: 
mysql> ALTER TABLE student
    -> RENAME TO stu ;
Query OK, 0 rows affected (0.04 sec)

mysql> select * from stu;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | O     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | O     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
6 rows in set (0.00 sec)


4) **CHANGE Column(rename)
   ALTER TABLE table_name 
   CHANGE COLUMN old_name new_name new_datatype new_constraint;

#EXAMPLE -: 
mysql> ALTER TABLE student
    -> CHANGE age stu_age INT ;
Query OK, 6 rows affected (0.28 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select * from student ;
+--------+--------+-------+-------+--------+---------+
| rollno | name   | marks | grade | city   | stu_age |
+--------+--------+-------+-------+--------+---------+
|    101 | chaitu |    78 | O     | Pune   |      19 |
|    102 | vins   |    79 | B     | Mumbai |      19 |
|    103 | nachi  |    85 | C     | Mumbai |      19 |
|    104 | tush   |    92 | D     | Delhi  |      19 |
|    105 | piyu   |    87 | O     | Delhi  |      19 |
|    106 | diksha |    80 | B     | Delhi  |      19 |
+--------+--------+-------+-------+--------+---------+
6 rows in set (0.00 sec)

5) **MODIFY Column(modify datatype / constraint)**
   ALTER TABLE table_name 
   MODIFY col_name new_datatype new _constraint;

# EXAMPLE 
mysql> ALTER TABLE student
    -> MODIFY age VARCHAR(2);
Query OK, 6 rows affected (0.17 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select * from student ;
+--------+--------+-------+-------+--------+------+
| rollno | name   | marks | grade | city   | age  |
+--------+--------+-------+-------+--------+------+
|    101 | chaitu |    78 | O     | Pune   | 19   |
|    102 | vins   |    79 | B     | Mumbai | 19   |
|    103 | nachi  |    85 | C     | Mumbai | 19   |
|    104 | tush   |    92 | D     | Delhi  | 19   |
|    105 | piyu   |    87 | O     | Delhi  | 19   |
|    106 | diksha |    80 | B     | Delhi  | 19   |
+--------+--------+-------+-------+--------+------+
6 rows in set (0.00 sec)

6) **TRUNCATE(to delete table's data)**

TRUNCATE TABLE table_name;
# EXAMPLE : 
mysql> TRUNCATE TABLE student ;
Query OK, 0 rows affected (0.41 sec)

mysql> select * from student ;
Empty set (0.00 sec)

mysql> desc student ;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| rollno | int         | NO   | PRI | NULL    |       |
| name   | varchar(50) | YES  |     | NULL    |       |
| marks  | int         | NO   |     | NULL    |       |
| grade  | varchar(10) | YES  |     | NULL    |       |
| city   | varchar(20) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

*********************************************************************************
**Cascading for FK(Foreign Key)**
## on Update Cascade 
-> When we create a foreign key using this option , it deletes the referencing rows in the child table . 
-> when the referenced row is deleted in the parent table in which has a primary key .

## On Delete Cascade 
-> when we create a foreign key using UPDATE CASCADE the referencing rows are updataed in the child table when the referenced row is updated in the parent table which has a primaey key.
 **Example **

mysql> create table teacher (
    -> id INT PRIMARY KEY ,
    -> name VARCHAR(50),
    -> dept_id INT ,
    -> FOREIGN KEY (dept_id) REFERENCES dept(id)
    -> ON UPDATE CASCADE
    -> ON DELETE CASCADE
    -> );
Query OK, 0 rows affected (0.13 sec)

mysql> desc teacher ;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| id      | int         | NO   | PRI | NULL    |       |
| name    | varchar(50) | YES  |     | NULL    |       |
| dept_id | int         | YES  | MUL | NULL    |       |
+---------+-------------+------+-----+---------+-------+
3 rows in set (0.01 sec)

mysql> insert into dept
    -> VALUES
    -> (101 , "English") ,
    -> (102 , "IT");
Query OK, 2 rows affected (0.01 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from dept ;
+-----+---------+
| id  | name    |
+-----+---------+
| 101 | English |
| 102 | IT      |
+-----+---------+
2 rows in set (0.00 sec)

mysql> insert into teacher
    -> VALUES
    -> (101 , "Adam" , 101) ,
    -> (102 , "Eve" , 102);
Query OK, 2 rows affected (0.02 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select * from teacher ;
+-----+------+---------+
| id  | name | dept_id |
+-----+------+---------+
| 101 | Adam |     101 |
| 102 | Eve  |     102 |
+-----+------+---------+
2 rows in set (0.00 sec)

mysql> UPDATE dept
    -> SET id = 103
    -> WHERE id = 102 ;
Query OK, 1 row affected (0.03 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from student ;
+--------+--------+-------+-------+--------+
| rollno | name   | marks | grade | city   |
+--------+--------+-------+-------+--------+
|    101 | chaitu |    78 | O     | Pune   |
|    102 | vins   |    79 | B     | Mumbai |
|    103 | nachi  |    85 | C     | Mumbai |
|    104 | tush   |    92 | D     | Delhi  |
|    105 | piyu   |    87 | O     | Delhi  |
|    106 | diksha |    80 | B     | Delhi  |
+--------+--------+-------+-------+--------+
6 rows in set (0.00 sec)
************************************************************************************

*********************    🎯 Practice Question 🎯   ********************
Que-> In the student table :
******* a . Chnage the name of column "name" to "full_name".*********
ANS-> mysql> ALTER TABLE student
    -> CHANGE name full_name VARCHAR(50);
Query OK, 0 rows affected (0.07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from student;
+--------+-----------+-------+-------+--------+
| rollno | full_name | marks | grade | city   |
+--------+-----------+-------+-------+--------+
|    101 | chaitu    |    78 | A     | Pune   |
|    102 | vins      |    79 | B     | Mumbai |
|    103 | nachi     |    85 | C     | Mumbai |
|    104 | tush      |    92 | D     | Delhi  |
|    105 | piyu      |    87 | A     | Delhi  |
|    106 | diksha    |    80 | B     | Delhi  |
+--------+-----------+-------+-------+--------+
6 rows in set (0.00 sec)

*****b .Delete all the student who scored marks less than 80.****
ANS ->
mysql> DELETE FROM student
    -> WHERE marks < 80;
Query OK, 2 rows affected (0.09 sec)

mysql> select * from student ;
+--------+-----------+-------+--------+
| rollno | full_name | marks | city   |
+--------+-----------+-------+--------+
|    103 | nachi     |    85 | Mumbai |
|    104 | tush      |    92 | Delhi  |
|    105 | piyu      |    87 | Delhi  |
|    106 | diksha    |    80 | Delhi  |
+--------+-----------+-------+--------+
4 rows in set (0.00 sec)

***** c . Delete the column for grades .****
ANS -> 
mysql> ALTER TABLE student
    -> DROP COLUMN grade ;
Query OK, 0 rows affected (0.15 sec)
Records: 0  Duplicates: 0  Warnings: 0
mysql> select * from student ;
+--------+-----------+-------+--------+
| rollno | full_name | marks | city   |
+--------+-----------+-------+--------+
|    101 | chaitu    |    78 | Pune   |
|    102 | vins      |    79 | Mumbai |
|    103 | nachi     |    85 | Mumbai |
|    104 | tush      |    92 | Delhi  |
|    105 | piyu      |    87 | Delhi  |
|    106 | diksha    |    80 | Delhi  |
+--------+-----------+-------+--------+
6 rows in set (0.00 sec)

*****************************************************************************************

**********************JOINS in SQL *******************************
Join is used to combine rows from two or more tables , based on a related column between them .

# TYPES OF JOINS 
1) Inner join 
2) Left join   //outer join 
3) Right join  //outer join 
4) Full join   //outer join 

1)Inner Join 
-> Returns records that have matching values in both tables 
SYNTAX : 
SELECT column(s)
FROM tableA 
INNER JOIN tableB 
ON tableA.col_name = tableB.col_name;

***EXAMPLE***
mysql> use college ;
Database changed
mysql> create table student(
    -> id INT PRIMARY KEY ,
    -> name VARCHAR(50)
    -> );
Query OK, 0 rows affected (0.10 sec)

mysql> insert into student (id,name)
    -> values
    -> (101,"adam"),
    -> (102,"bob"),
    -> (103,"casey");
Query OK, 3 rows affected (0.02 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> select * from student
    -> ;
+-----+-------+
| id  | name  |
+-----+-------+
| 101 | adam  |
| 102 | bob   |
| 103 | casey |
+-----+-------+
3 rows in set (0.00 sec)

mysql> create table course(
    -> id INT PRIMARY KEY ,
    -> course VARCHAR(50)
    -> );
Query OK, 0 rows affected (0.10 sec)

mysql> insert into course(id,course)
    -> values
    -> (102,"english"),
    -> (105,"math"),
    -> (103,"science"),
    -> (107,"computer science");
Query OK, 4 rows affected (0.02 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> select * from course ;
+-----+------------------+
| id  | course           |
+-----+------------------+
| 102 | english          |
| 103 | science          |
| 105 | math             |
| 107 | computer science |
+-----+------------------+
4 rows in set (0.00 sec)

mysql> select * from student as a
    -> INNER JOIN course as b
    -> ON a.id = b.id;
+-----+-------+-----+---------+
| id  | name  | id  | course  |
+-----+-------+-----+---------+
| 102 | bob   | 102 | english |
| 103 | casey | 103 | science |
+-----+-------+-----+---------+
2 rows in set (0.00 sec)

2) LEFT JOIN 
->Return all records from left table , and the matched records from the right table .
SYNTAX :
SELECT column(s)
FROM tableA
LEFT JOIN tableB 
ON tableA.col_name = tableB.col_name ;
*****EXAMPLE****
mysql> select * from student as a
    -> LEFT JOIN course as b
    -> ON a.id = b.id;
+-----+-------+------+---------+
| id  | name  | id   | course  |
+-----+-------+------+---------+
| 101 | adam  | NULL | NULL    |
| 102 | bob   |  102 | english |
| 103 | casey |  103 | science |
+-----+-------+------+---------+
3 rows in set (0.01 sec)

3)RIGHT JOIN 
->Return all records from right  table , and the matched records from the left  table .
SYNTAX :
SELECT column(s)
FROM tableA
RIGHT JOIN tableB 
ON tableA.col_name = tableB.col_name ;

******EXAMPLE*****
mysql> select * from student as a
    -> RIGHT JOIN course as b
    -> ON a.id = b.id;
+------+-------+-----+------------------+
| id   | name  | id  | course           |
+------+-------+-----+------------------+
|  102 | bob   | 102 | english          |
|  103 | casey | 103 | science          |
| NULL | NULL  | 105 | math             |
| NULL | NULL  | 107 | computer science |
+------+-------+-----+------------------+
4 rows in set (0.00 sec)

4) FULL JOIN 
-> Returns all records when there is a match in either left or right table.
SYNTAX 
SELECT * FROM student as a 
LEFT JOIN course as b 
ON a.id = b.id 
UNION 
SELECT * FROM student as a 
RIGHT JOIN course as b 
ON a.id = b.id ;

*****EXAMPLE*****
mysql> select * from student as a
    -> LEFT JOIN course as b
    -> ON a.id = b.id
    -> UNION
    -> select * from student as a
    -> RIGHT JOIN course as b
    -> ON a.id = b.id;
+------+-------+------+------------------+
| id   | name  | id   | course           |
+------+-------+------+------------------+
|  101 | adam  | NULL | NULL             |
|  102 | bob   |  102 | english          |
|  103 | casey |  103 | science          |
| NULL | NULL  |  105 | math             |
| NULL | NULL  |  107 | computer science |
+------+-------+------+------------------+
5 rows in set (0.01 sec)

***********************************************************************************************************

-------------------------🎯 Think & Ans 🎯------------------------------------------
Que : Write SQL comands to display the left and right exclusive join ?
Ans :
mysql> select * from student as a
    -> LEFT  JOIN course as b
    -> ON a.id = b.id
    -> WHERE b.id IS NULL;
+-----+------+------+--------+
| id  | name | id   | course |
+-----+------+------+--------+
| 101 | adam | NULL | NULL   |
+-----+------+------+--------+
1 row in set (0.00 sec)


mysql> select * from student as a
    -> RIGHT  JOIN course as b
    -> ON a.id = b.id
    -> WHERE a.id IS NULL;
+------+------+-----+------------------+
| id   | name | id  | course           |
+------+------+-----+------------------+
| NULL | NULL | 105 | math             |
| NULL | NULL | 107 | computer science |
+------+------+-----+------------------+
2 rows in set (0.01 sec)

Que : Only gives the left and right join element without giving the intersection element 
mysql> select * from student as a
    -> LEFT JOIN course as b
    -> ON a.id = b.id
    -> WHERE b.id IS NULL
    -> UNION
    -> select * from student as a
    -> RIGHT JOIN course as b
    -> ON a.id = b.id
    -> WHERE a.id IS NULL
    -> ;
+------+------+------+------------------+
| id   | name | id   | course           |
+------+------+------+------------------+
|  101 | adam | NULL | NULL             |
| NULL | NULL |  105 | math             |
| NULL | NULL |  107 | computer science |
+------+------+------+------------------+
3 rows in set (0.00 sec)

# Self Join 
It is a regular join but the table is joined with itself  
****EXAMPLE *****
mysql> Create TABLE employee (
    -> id INT PRIMARY KEY ,
    -> name VARCHAR (50),
    -> manager_id INT
    -> );
Query OK, 0 rows affected (0.09 sec)

mysql> INSERT INTO employee (id,name , manager_id)
    -> VALUES
    -> (101,"adam" , 103 ),
    -> (102 , "bob" , 104 ),
    -> (103,"casey" , null),
    -> (104 , "donald",103);
Query OK, 4 rows affected (0.02 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> select * from employee ;
+-----+--------+------------+
| id  | name   | manager_id |
+-----+--------+------------+
| 101 | adam   |        103 |
| 102 | bob    |        104 |
| 103 | casey  |       NULL |
| 104 | donald |        103 |
+-----+--------+------------+
4 rows in set (0.00 sec)

mysql> select * from employee as a
    -> JOIN employee as b
    -> ON a.id = b.manager_id ;
+-----+--------+------------+-----+--------+------------+
| id  | name   | manager_id | id  | name   | manager_id |
+-----+--------+------------+-----+--------+------------+
| 103 | casey  |       NULL | 101 | adam   |        103 |
| 104 | donald |        103 | 102 | bob    |        104 |
| 103 | casey  |       NULL | 104 | donald |        103 |
+-----+--------+------------+-----+--------+------------+
3 rows in set (0.00 sec)


# Only gives the name of a and name of b not display all the column .
mysql> select a.name , b.name
    -> FROM employee as a
    -> JOIN employee as b
    -> ON a.id = b.manager_id ;
+--------+--------+
| name   | name   |
+--------+--------+
| casey  | adam   |
| donald | bob    |
| casey  | donald |
+--------+--------+
3 rows in set (0.00 sec)


mysql> select a.name as manager_name , b.name
    -> FROM employee as a
    -> JOIN employee as b
    -> ON a.id = b.manager_id ;
+--------------+--------+
| manager_name | name   |
+--------------+--------+
| casey        | adam   |
| donald       | bob    |
| casey        | donald |
+--------------+--------+
3 rows in set (0.00 sec)

**********************************************************************************************

***UNION***
It is used to combine the result-set of two or more SELECT statements .
Gives UNIQUE records 

---------To use it :----------
-> every SELECT should have same no.of columns 
-> columns must have similar data types 
-> columns in every SELECT should be in same order .

****SYNTAX**** 
SELECT column(s) FROM tableA 
UNION 
SELECT column(s) FROM tableB 

EXAMPLE : mysql> select name from employee
    -> UNION
    -> select name from employee ;
+--------+
| name   |
+--------+
| adam   |
| bob    |
| casey  |
| donald |
+--------+
4 rows in set (0.00 sec)

**********************************************************************************************

************SQL SUB QUERIES **************
A Subquerry or Inner querry or a Nested query is a query within another SQL query .
It involves 2 select statements .

SYNTAX 
SELECT column(s)
FROM table_name 
WHERE col_name operator 
(subquery);
***********************************************************************************

*******************MYSQL Views *************************
 -> A view is a virtual table based on the result-set of an SQL statement .
-> A view always shows up-to-date data .
->The database engine recreates the view , every time a user queries it 
***SYNTAX ****
CREATE VIEW view1 AS 
SELECT rollno , name FROM student ;

***********EXAMPLE*******************
mysql> CREATE VIEW view AS
    -> SELECT id , name FROM employee  ;
Query OK, 0 rows affected (0.03 sec)

mysql> select * from view ;
+-----+--------+
| id  | name   |
+-----+--------+
| 101 | adam   |
| 102 | bob    |
| 103 | casey  |
| 104 | donald |
+-----+--------+
4 rows in set (0.01 sec)







